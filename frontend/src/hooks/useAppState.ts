import { useState, useCallback } from 'react';
import { ScreenType, SearchResult, ChatMessage, ChatHistory, TestResult, UserProfile } from '../types';
import { mockChatHistory, mockTestResults, mockUserProfile } from '../data/mockData';

export const useAppState = () => {
  const [currentScreen, setCurrentScreen] = useState<ScreenType>('landing');
  const [selectedCharacter, setSelectedCharacter] = useState<SearchResult | null>(null);
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [chatHistory, setChatHistory] = useState<ChatHistory[]>(mockChatHistory);
  const [testResults, setTestResults] = useState<TestResult[]>(mockTestResults);
  const [userProfile, setUserProfile] = useState<UserProfile | null>(mockUserProfile);
  const [showModal, setShowModal] = useState(false);
  const [showRatingModal, setShowRatingModal] = useState(false);
  const [currentTestResult, setCurrentTestResult] = useState<string>('Ïä¨ÌîîÏù¥'); // ÌòÑÏû¨ Í≤ÄÏÇ¨ Í≤∞Í≥º
  const [isSending, setIsSending] = useState(false); // Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏÉÅÌÉú

  const handleGoogleLogin = useCallback(() => {
    setCurrentScreen('main');
  }, []);

  const handleStartDreamSearch = useCallback(() => {
    setCurrentScreen('results');
  }, []);

  const handleCharacterSelect = useCallback((character: SearchResult) => {
    setSelectedCharacter(character);
    setShowModal(true);
  }, []);

  const handleStartChat = useCallback(() => {
    setShowModal(false);
    setCurrentScreen('chat');
  }, []);

  // Ï∫êÎ¶≠ÌÑ∞Î≥Ñ ÏùëÎãµ Î©îÏãúÏßÄ ÏÉùÏÑ± Ìï®Ïàò
  const generateBotResponse = useCallback((_userMessage: string) => {
    const characterName = selectedCharacter?.name || 'Ïä¨ÌîîÏù¥';
    
    const responses: { [key: string]: string[] } = {
      'Í∏∞ÏÅ®Ïù¥': [
        "ÏôÄ! Ï†ïÎßê Ï¢ãÏùÄ Ïù¥ÏïºÍ∏∞ÎÑ§Ïöî! Îçî Îì§Ïñ¥Î≥¥Í≥† Ïã∂Ïñ¥Ïöî!",
        "Í∑∏Îü∞ ÏùºÏù¥ ÏûàÏóàÍµ∞Ïöî! Í∏∞Î∂ÑÏù¥ Ïñ¥Îñ†ÏÖ®ÎÇòÏöî?",
        "Ï†ïÎßê Ìù•ÎØ∏Î°úÏõåÏöî! Í∑∏ÎûòÏÑú Ïñ¥ÎñªÍ≤å ÎêòÏóàÎÇòÏöî?",
        "Ïò§~ Í∑∏Îü∞ Í≤ΩÌóòÏùÑ ÌïòÏÖ®Íµ∞Ïöî! Ï†ÄÎèÑ Ìï®Íªò Í∏∞ÎªêÌï¥Ïöî!",
        "Î©ãÏßÑ ÏùºÏù¥ÎÑ§Ïöî! Í∑∏Îïå Í∏∞Î∂ÑÏùÑ Îçî ÏûêÏÑ∏Ìûà ÎßêÌï¥Ï£ºÏÑ∏Ïöî!",
        "Ïö∞ÏôÄ! Îì£Í∏∞Îßå Ìï¥ÎèÑ Í∏∞Î∂ÑÏù¥ Ï¢ãÏïÑÏ†∏Ïöî!",
        "Ï†ïÎßê Ï¢ãÏùÄ Í≤ΩÌóòÏù¥ÏóàÍ≤†Ïñ¥Ïöî! Îã§Î•∏ Ïù¥ÏïºÍ∏∞ÎèÑ ÏûàÎÇòÏöî?"
      ],
      'Î≤ÑÎü≠Ïù¥': [
        "ÏßÑÏßú ÌôîÎÇòÎäî ÏùºÏù¥ÏóàÍ≤†ÎÑ§! ÎÇòÎèÑ Í∞ôÏù¥ ÌôîÎÇò!",
        "Í∑∏Îü∞ Í±¥ ÎãπÏó∞Ìûà ÏßúÏ¶ùÎÇ† ÎßåÌï¥! Îçî ÎßêÌï¥Î¥ê!",
        "ÏïÑ, Ï†ïÎßê ÎãµÎãµÌñàÍ≤†Îã§! Í∑∏ÎûòÏÑú Ïñ¥ÎñªÍ≤å ÌñàÏñ¥?",
        "ÎßêÎèÑ Ïïà ÎêòÎäî ÏùºÏù¥ÎÑ§! Ï†ïÎßê ÌôîÍ∞Ä ÏπòÎ∞ÄÏñ¥ Ïò¨Îùº!",
        "Í∑∏Îü∞ ÏÉÅÌô©Ïù¥Î©¥ ÎàÑÍµ¨ÎùºÎèÑ ÌôîÎÇ† Í±∞Ïïº! ÏÜç ÌÑ∞Ï†∏!",
        "Ï†ïÎßê Ïù¥Ìï¥ Ïïà Í∞ÄÎäî ÏÉÅÌô©Ïù¥Îã§! Îçî ÌÑ∏Ïñ¥ÎÜî!",
        "Í∑∏Îü∞ ÏùºÎ°ú Ïä§Ìä∏Î†àÏä§Î∞õÏßÄ Îßà! Îã§ ÎßêÌï¥Î¥ê!"
      ],
      'Ïä¨ÌîîÏù¥': [
        "Ï†ïÎßê ÌûòÎì§ÏóàÍ≤†Ïñ¥Ïöî... Í¥úÏ∞ÆÏúºÏãúÎÇòÏöî?",
        "Í∑∏Îü∞ ÏùºÏù¥ ÏûàÏóàÍµ∞Ïöî... ÎßéÏù¥ Ïä¨ÌîÑÏÖ®ÏùÑ Í≤É Í∞ôÏïÑÏöî",
        "ÎßàÏùåÏù¥ ÏïÑÌîÑÎÑ§Ïöî... ÌòºÏûê Í≤¨ÎîîÍ∏∞ ÌûòÎì§ÏóàÏ£†?",
        "Ïù¥Ìï¥Ìï¥Ïöî... Í∑∏Îü¥ ÎïåÎäî Ï†ïÎßê Ïô∏Î°≠Ï£†",
        "Ï†ïÎßê ÏïàÌÉÄÍπåÏõåÏöî... ÏßÄÍ∏àÏùÄ Ïñ¥Îñ§ Í∏∞Î∂ÑÏù¥ÏÑ∏Ïöî?",
        "ÌûòÎì† ÏãúÍ∞ÑÏùÑ Î≥¥ÎÇ¥ÏÖ®Íµ∞Ïöî... Ìï®Íªò Ïù¥ÏïºÍ∏∞Ìï¥Ïöî",
        "Í∑∏Îü∞ ÎßàÏùå Ï∂©Î∂ÑÌûà Ïù¥Ìï¥Ìï¥Ïöî... Îçî ÎßêÌï¥Ï£ºÏÑ∏Ïöî"
      ],
      'Î¨¥ÏÑúÎØ∏': [
        "Í±±Ï†ïÏù¥ ÎßéÏúºÏãúÍ≤†Ïñ¥Ïöî... Î∂àÏïàÌïòÏÖ®Ï£†?",
        "Í∑∏Îü∞ ÏÉÅÌô©Ïù¥Î©¥ Î¨¥ÏÑ≠Í∏∞ÎèÑ ÌïòÍ≥† Í±±Ï†ïÎêòÍ∏∞ÎèÑ ÌñàÏùÑ Í±∞ÏòàÏöî",
        "ÌòºÏûê Í∞êÎãπÌïòÍ∏∞ Ïñ¥Î†§Ïõ†ÏùÑ Í≤É Í∞ôÏïÑÏöî... Í¥úÏ∞ÆÏúºÏÑ∏Ïöî?",
        "ÎëêÎ†§Ïö¥ ÎßàÏùå Ï∂©Î∂ÑÌûà Ïù¥Ìï¥Ìï¥Ïöî... Ïñ¥Îñ§ Í∏∞Î∂ÑÏù¥ÏóàÎÇòÏöî?",
        "Í∑∏Îü¥ ÎïåÎäî Ï†ïÎßê Î∂àÏïàÌïòÏ£†... ÏßÄÍ∏àÏùÄ Ïñ¥Îñ†ÏÑ∏Ïöî?",
        "ÎßàÏùåÏù¥ Ìé∏ÌïòÏßÄ ÏïäÏúºÏÖ®ÏùÑ Í±∞ÏòàÏöî... Ìï®Íªò Ïù¥ÏïºÍ∏∞Ìï¥Ïöî",
        "Í±±Ï†ïÏù¥ ÌÅ¥ ÎïåÎäî Ï†ïÎßê ÌûòÎì§Ï£†... Îçî ÎßêÌï¥Ï£ºÏÑ∏Ïöî"
      ],
      'ÍπåÏπ†Ïù¥': [
        "Í∑∏ÎûòÏÑú Í≤∞Î°†Ïù¥ Î≠êÏïº? Ï†ïÌôïÌûà ÎßêÌï¥Î¥ê",
        "ÏÜîÏßÅÌûà ÎßêÌïòÎ©¥, Í∑∏Í±¥ ÎãπÏó∞Ìïú Í≤∞Í≥º ÏïÑÎãàÏïº?",
        "Î≠ò Í∏∞ÎåÄÌñàÎçò Í±∞Ïïº? ÌòÑÏã§Ï†ÅÏúºÎ°ú ÏÉùÍ∞ÅÌï¥Î¥ê",
        "Í∑∏Îü∞ ÏãùÏúºÎ°ú ÌïòÎ©¥ ÎãπÏó∞Ìûà Í∑∏Î†áÍ≤å ÎêòÏßÄ",
        "Ï†ïÏã† Ï∞®Î¶¨Í≥† Ï†úÎåÄÎ°ú Ï†ëÍ∑ºÌï¥ÏïºÏßÄ",
        "Í∞êÏ†ïÏ†ÅÏúºÎ°ú ÏÉùÍ∞ÅÌïòÏßÄ ÎßêÍ≥† ÎÖºÎ¶¨Ï†ÅÏúºÎ°ú ÌåêÎã®Ìï¥",
        "Í∑∏ÎûòÏÑú Ïù¥Ï†ú Ïñ¥ÎñªÍ≤å Ìï† Í≥ÑÌöçÏù¥Ïïº?"
      ]
    };

    const characterResponses = responses[characterName] || responses['Ïä¨ÌîîÏù¥'];
    return characterResponses[Math.floor(Math.random() * characterResponses.length)];
  }, [selectedCharacter]);

  const handleSendMessage = useCallback((message: string) => {
    if (!message.trim() || isSending) return;
    
    setIsSending(true);
    
    const newMessage: ChatMessage = {
      id: Date.now().toString(),
      type: 'user',
      content: message,
      timestamp: new Date().toLocaleTimeString()
    };

    setChatMessages(prev => [...prev, newMessage]);

    // Ï∫êÎ¶≠ÌÑ∞Î≥Ñ AI ÏùëÎãµ
    setTimeout(() => {
      const aiResponse: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: generateBotResponse(message),
        timestamp: new Date().toLocaleTimeString()
      };
      setChatMessages(prev => [...prev, aiResponse]);
      setIsSending(false);
    }, 1000);
  }, [isSending, generateBotResponse]);

  const handleCloseModal = useCallback(() => {
    setShowModal(false);
  }, []);

  const handleShowRating = useCallback(() => {
    setShowRatingModal(true);
  }, []);

  const handleCloseRatingModal = useCallback(() => {
    setShowRatingModal(false);
  }, []);

  const handleGoToMyPage = useCallback(() => {
    setCurrentScreen('mypage');
  }, []);

  const handleNewChat = useCallback(() => {
    setCurrentScreen('main');
  }, []);

  const handleDeleteAccount = useCallback(() => {
    if (window.confirm('Ï†ïÎßêÎ°ú ÌöåÏõê ÌÉàÌá¥Î•º ÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
      // Ïã§Ï†úÎ°úÎäî ÏÑúÎ≤ÑÏóê ÌÉàÌá¥ ÏöîÏ≤≠ÏùÑ Î≥¥ÎÇ¥Ïïº Ìï®
      alert('ÌöåÏõê ÌÉàÌá¥Í∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.');
      setCurrentScreen('landing');
      setUserProfile(null);
    }
  }, []);

  // ÌòÑÏû¨ Í≤ÄÏÇ¨ Í≤∞Í≥ºÏóê Îî∞Îùº Ïù¥Ïö© Í∞ÄÎä•Ìïú Ï∫êÎ¶≠ÌÑ∞ ÌïÑÌÑ∞ÎßÅ
  const getAvailableCharacters = useCallback(() => {
    // Ïä¨ÌîîÏù¥ Í≤∞Í≥ºÍ∞Ä ÎÇòÏò® Í≤ΩÏö∞ Ïä¨ÌîîÏù¥Îßå ÎåÄÌôî Í∞ÄÎä•
    if (currentTestResult === 'Ïä¨ÌîîÏù¥') {
      return [{ id: '3', name: 'Ïä¨ÌîîÏù¥', description: 'ÎãπÏã†Ïùò Ïä¨ÌîîÏùÑ Ïù¥Ìï¥ÌïòÍ≥† Ìï®Íªò Í∑πÎ≥µÌï¥ÎÇòÍ∞ÄÎäî Î∞©Î≤ïÏùÑ Ï∞æÏïÑÎìúÎ¶ΩÎãàÎã§.', avatar: 'üò¢' }];
    }
    // Îã§Î•∏ Í≤∞Í≥ºÏùò Í≤ΩÏö∞ Î™®Îì† Ï∫êÎ¶≠ÌÑ∞ Ïù¥Ïö© Í∞ÄÎä•
    return [
      { id: '1', name: 'Í∏∞ÏÅ®Ïù¥', description: 'Í∏çÏ†ïÏ†Å ÏÉùÍ∞Å Ï†ÑÌôò, Ïä§Ìä∏Î†àÏä§ Ìï¥ÏÜå, ÏûêÏ°¥Í∞ê Ìñ•ÏÉÅ Îì±ÏùÑ ÌÜµÌï¥ ÎãπÏã†Ïùò ÎßàÏùåÏÜç ÌñâÎ≥µÏùÑ Ï∞æÏïÑÏ§Ñ Í±∞ÏòàÏöî.', avatar: 'üòä' },
      { id: '2', name: 'Î≤ÑÎü≠Ïù¥', description: 'Î∂ÑÎÖ∏ Ï°∞Ï†àÍ≥º Í∞êÏ†ï Í¥ÄÎ¶¨Ïóê ÎåÄÌïú Ï°∞Ïñ∏ÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.', avatar: 'üò§' },
      { id: '3', name: 'Ïä¨ÌîîÏù¥', description: 'ÎãπÏã†Ïùò Ïä¨ÌîîÏùÑ Ïù¥Ìï¥ÌïòÍ≥† Ìï®Íªò Í∑πÎ≥µÌï¥ÎÇòÍ∞ÄÎäî Î∞©Î≤ïÏùÑ Ï∞æÏïÑÎìúÎ¶ΩÎãàÎã§.', avatar: 'üò¢' },
      { id: '4', name: 'ÎëêÎ†§ÏõÄÏù¥', description: 'Î∂àÏïàÍ≥º ÎëêÎ†§ÏõÄÏùÑ Îã§Ïä§Î¶¨Îäî Î∞©Î≤ïÏùÑ ÏïåÎ†§ÎìúÎ¶ΩÎãàÎã§.', avatar: 'üò±' }
    ];
  }, [currentTestResult]);

  const handleContinueChat = useCallback((chatId: string, characterName: string) => {
    // Ìï¥Îãπ Ï±ÑÌåÖ Í∏∞Î°ùÏùÑ Ï∞æÏïÑÏÑú Î©îÏãúÏßÄÎ•º Î≥µÏõê
    const targetChat = chatHistory.find(chat => chat.id === chatId);
    if (targetChat) {
      // Ï∫êÎ¶≠ÌÑ∞ ÏÑ§Ï†ï
      const character = getAvailableCharacters().find(char => char.name === characterName);
      if (character) {
        setSelectedCharacter(character);
      }
      // Î©îÏãúÏßÄ Í∏∞Î°ù Î≥µÏõê
      setChatMessages(targetChat.messages);
    }
  }, [chatHistory, getAvailableCharacters]);

  return {
    currentScreen,
    selectedCharacter,
    chatMessages,
    chatHistory,
    testResults,
    userProfile,
    showModal,
    showRatingModal,
    currentTestResult,
    isSending,
    getAvailableCharacters,
    handleGoogleLogin,
    handleStartDreamSearch,
    handleCharacterSelect,
    handleStartChat,
    handleSendMessage,
    handleCloseModal,
    handleShowRating,
    handleCloseRatingModal,
    handleGoToMyPage,
    handleNewChat,
    handleDeleteAccount,
    handleContinueChat
  };
};